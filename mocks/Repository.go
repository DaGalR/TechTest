// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	dto "techtest/dto"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0
func (_m *Repository) CreateOrder(_a0 *dto.CreateOrderRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.CreateOrderRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePayment provides a mock function with given fields: _a0
func (_m *Repository) CreatePayment(_a0 *dto.CreatePaymentRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.CreatePaymentRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: _a0
func (_m *Repository) GetOrder(_a0 string) (*dto.CreateOrderRequest, error) {
	ret := _m.Called(_a0)

	var r0 *dto.CreateOrderRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.CreateOrderRequest, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.CreateOrderRequest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateOrderRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOrderCreatedEvent provides a mock function with given fields: _a0, _a1
func (_m *Repository) SendOrderCreatedEvent(_a0 string, _a1 *dto.CreateOrderEvent) (*string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *dto.CreateOrderEvent) (*string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *dto.CreateOrderEvent) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *dto.CreateOrderEvent) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPaymentCreatedEvent provides a mock function with given fields: _a0, _a1
func (_m *Repository) SendPaymentCreatedEvent(_a0 string, _a1 string) (*string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: _a0, _a1
func (_m *Repository) UpdateOrderStatus(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
